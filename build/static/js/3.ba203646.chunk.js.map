{"version":3,"sources":["components/UI/Input/Input.js","components/UI/Input/Input.module.css","components/Order/CheckoutSummary/CheckoutSummary.module.css","containers/Checkout/ContactData/ContactData.module.css","components/Order/CheckoutSummary/CheckoutSummary.js","containers/Checkout/ContactData/ContactData.js","containers/Checkout/Checkout.js"],"names":["input","props","inputElement","inputClasses","classes","InputElement","invalid","shouldValidate","touched","push","Invalid","elementType","className","join","elementConfig","value","onChange","changed","options","map","option","displayValue","Input","Label","label","module","exports","checkoutSummary","style","width","margin","Burger","ingredients","Button","btnType","clicked","checkoutCancelled","checkoutContinued","ContactData","state","orderForm","name","type","placeholder","validation","required","valid","street","zipCode","minLength","maxLength","country","deliveryMethod","formIsValid","orderHandler","event","preventDefault","formData","formElementIdentifier","order","ings","price","orderData","userId","onOrderBurger","token","inputChangedHandler","inputIdentifier","updatedFormElement","updateObject","target","checkValidity","updatedOrderForm","setState","formElementsArray","key","this","id","config","form","onSubmit","formElement","disabled","loading","Spinner","Component","connect","burgerBuilder","totalPrice","auth","dispatch","actions","withErrorHandler","axios","Checkout","checkoutCancelledHandler","history","goBack","checkoutContinuedHandler","replace","summary","to","purchasedRedirected","purchased","CheckoutSummary","path","match","component"],"mappings":"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","file":"static/js/3.ba203646.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nimport classes from './Input.module.css';\r\n\r\nconst input = (props) => {\r\n    let inputElement =null;\r\n    const inputClasses = [classes.InputElement];\r\n\r\n    if(props.invalid && props.shouldValidate && props.touched){\r\n        inputClasses.push(classes.Invalid);\r\n    }\r\n\r\n    switch( props.elementType){\r\n        case ('input'): \r\n            inputElement = <input \r\n                className={inputClasses.join(' ')} \r\n                {...props.elementConfig} \r\n                value={props.value}\r\n                onChange={props.changed}/>\r\n                break;\r\n        case ('testarea'): \r\n            inputElement = <textarea \r\n                className={inputClasses.join(' ')} \r\n                {...props.elementConfig} \r\n                value={props.value}\r\n                onChange={props.changed}/>\r\n                break;\r\n        case ('select'): \r\n            inputElement = (<select \r\n                className={inputClasses.join(' ')} \r\n                value={props.value}\r\n                onChange={props.changed}>\r\n                {props.elementConfig.options.map(option => (\r\n                    <option key={option.value} value={option.value}>\r\n                            {option.displayValue}\r\n                        </option>\r\n                ))}\r\n                </select>);\r\n                break;\r\n        default: \r\n            inputElement = <input \r\n                className={inputClasses.join(' ')} \r\n                {...props.elementConfig} \r\n                value={props.value}\r\n                onChange={props.changed}/> ;\r\n\r\n    }\r\n\r\n    return(\r\n        <div className={classes.Input}>\r\n            <label className={classes.Label}>{props.label}</label>\r\n            {inputElement}\r\n        </div>\r\n    )\r\n\r\n}\r\n\r\nexport default input;\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Input\":\"Input_Input__MMc-6\",\"Label\":\"Input_Label__3w0cy\",\"InputElement\":\"Input_InputElement__30ZxU\",\"Invalid\":\"Input_Invalid__T8Buq\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"CheckoutSummary\":\"CheckoutSummary_CheckoutSummary__2swLN\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"ContactData\":\"ContactData_ContactData__1L5VU\"};","import React from 'react';\r\nimport Burger from '../../Burger/Burger';\r\nimport Button from '../../UI/Button/Button';\r\nimport classes from './CheckoutSummary.module.css';\r\n\r\nconst checkoutSummary = (props) => {\r\n    return (\r\n        <div className={classes.checkoutSummary}>\r\n            <h1>We hope it tastes well!</h1>\r\n            <div style={{width: '100%' , margin:'auto'}}>\r\n                <Burger ingredients={props.ingredients}/>\r\n            </div>\r\n            <Button btnType=\"Danger\" clicked={props.checkoutCancelled}>CANCEL</Button>\r\n            <Button btnType=\"Success\" clicked={props.checkoutContinued}>CONTINUE</Button>\r\n        </div>\r\n        \r\n    );\r\n}\r\n\r\nexport default checkoutSummary;","import React, { Component } from \"react\";\r\nimport Button from '../../../components/UI/Button/Button';\r\nimport classes from './ContactData.module.css';\r\nimport axios from '../../../axios-orders'; \r\nimport Spinner from '../../../components/UI/Spinner/Spinner';\r\nimport Input from '../../../components/UI/Input/Input';\r\nimport { connect } from 'react-redux';\r\nimport withErrorHandler from '../../../hoc/withErrorHandler/withErrorHandler';\r\nimport * as actions from '../../../store/actions/index';\r\nimport { updateObject, checkValidity } from '../../../shared/utility';\r\n\r\nclass ContactData extends Component{\r\n    state = {\r\n        orderForm: {\r\n            name: {\r\n                elementType: 'input',\r\n                elementConfig: {\r\n                    type : 'text',\r\n                    placeholder: 'Your Name'\r\n                },\r\n                value: '',\r\n                validation : {\r\n                    required : true\r\n                },\r\n                valid: false,\r\n                touched : false \r\n            },\r\n            street: {\r\n                elementType: 'input',\r\n                elementConfig: {\r\n                    type : 'text',\r\n                    placeholder: 'Street'\r\n                },\r\n                value: '',\r\n                validation : {\r\n                    required : true\r\n                },\r\n                valid: false,\r\n                touched : false    \r\n            },\r\n            zipCode: {\r\n                elementType: 'input',\r\n                elementConfig: {\r\n                    type : 'text',\r\n                    placeholder: 'ZIP Code'\r\n                },\r\n                value: '',\r\n                validation : {\r\n                    required : true,\r\n                    minLength : 5,\r\n                maxLength : 5\r\n                },\r\n                valid: false,\r\n                touched : false   \r\n                },\r\n\r\n            country: {\r\n                elementType: 'input',\r\n                elementConfig: {\r\n                    type : 'email',\r\n                    placeholder: 'Your E-Mail'\r\n                },\r\n                value: '',\r\n                validation : {\r\n                    required : true\r\n                },\r\n                valid: false,\r\n                touched : false    \r\n                },\r\n\r\n            deliveryMethod: {\r\n                elementType: 'select',\r\n                elementConfig: {\r\n                    options : [\r\n                        {value: 'fastest', displayValue: 'Fastest'},\r\n                        {value: 'Cheapest', displayValue: 'Cheapest'}\r\n                    ]\r\n                },\r\n                value: 'fastest',\r\n                validation : {},\r\n                valid : true\r\n            }\r\n        },\r\n        formIsValid: false\r\n    }\r\n    \r\n    orderHandler = (event) => {\r\n        event.preventDefault();\r\n        // console.log(this.props.ingredients);\r\n            const formData = {};\r\n            for(let formElementIdentifier in this.state.orderForm){\r\n                formData[formElementIdentifier] = this.state.orderForm[formElementIdentifier].value;\r\n            }\r\n            const order = {\r\n            ingredients: this.props.ings,\r\n            price: this.props.price,\r\n            orderData : formData,\r\n            userId: this.props.userId\r\n            }\r\n            \r\n            this.props.onOrderBurger(order, this.props.token);\r\n            \r\n    }\r\n\r\n    inputChangedHandler = (event, inputIdentifier) => {\r\n\r\n        const updatedFormElement = updateObject(this.state.orderForm[inputIdentifier], {\r\n            value: event.target.value,\r\n            valid: checkValidity(event.target.value, this.state.orderForm[inputIdentifier].validation),\r\n            touched: true\r\n        });\r\n\r\n        const updatedOrderForm = updateObject(this.state.orderForm, {\r\n            [inputIdentifier]: updatedFormElement\r\n        \r\n        })\r\n        \r\n        let formIsValid = true;\r\n        for(let inputIdentifier in updatedOrderForm){\r\n            formIsValid = updatedOrderForm[inputIdentifier].valid && formIsValid;\r\n        }\r\n\r\n        this.setState({orderForm : updatedOrderForm, formIsValid : formIsValid})\r\n    }\r\n\r\n    render(){\r\n        const formElementsArray = [];\r\n        for(let key in this.state.orderForm){\r\n            formElementsArray.push({\r\n                id : key,\r\n                config : this.state.orderForm[key]\r\n            })\r\n        }\r\n        let form = (\r\n            <form onSubmit={this.orderHandler}>\r\n                    {formElementsArray.map(formElement => (\r\n                        <Input \r\n                            key={formElement.id}\r\n                            elementType={formElement.config.elementType}\r\n                            elementConfig={formElement.config.elementConfig}\r\n                            value= {formElement.config.value}\r\n                            invalid={!formElement.config.valid}\r\n                            shouldValidate={formElement.config.validation}\r\n                            touched = {formElement.config.touched}\r\n                            changed={(event) => this.inputChangedHandler(event, formElement.id)} />\r\n\r\n                    )\r\n                    )}\r\n                    <Button btnType=\"Success\" disabled={!this.state.formIsValid}>Order</Button>\r\n                </form>\r\n        );\r\n\r\n        if(this.props.loading){\r\n            form =  <Spinner />\r\n        }\r\n        return (\r\n            <div className={classes.ContactData}>\r\n                <h4>Enter your Contact Data</h4>\r\n                {form}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return{\r\n        ings: state.burgerBuilder.ingredients,\r\n        price: state.burgerBuilder.totalPrice,\r\n        loading: state.order.loading,\r\n        token: state.auth.token,\r\n        userId: state.auth.userId\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return{\r\n        onOrderBurger: (orderData, token) => dispatch(actions.purchaseBurger(orderData, token))\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(withErrorHandler(ContactData, axios));","import React ,{Component} from 'react';\r\nimport { Redirect, Route} from 'react-router-dom';\r\nimport CheckoutSummary from '../../components/Order/CheckoutSummary/CheckoutSummary';\r\nimport ContactData from './ContactData/ContactData';\r\nimport { connect } from 'react-redux';\r\n\r\n\r\nclass Checkout extends Component{ \r\n\r\n    // componentWillMount () {\r\n    //     this.props.onInitPurchase();\r\n    // }\r\n    checkoutCancelledHandler = () =>{\r\n        this.props.history.goBack();\r\n    } \r\n\r\n    checkoutContinuedHandler = () => {\r\n        this.props.history.replace('/checkout/contact-data');\r\n    }\r\n\r\n    render(){\r\n        let summary = <Redirect to=\"/\" />\r\n        if(this.props.ings){\r\n            const purchasedRedirected = this.props.purchased ? <Redirect to=\"/\" /> : null;\r\n            summary= (\r\n                <div>\r\n                    {purchasedRedirected}\r\n                    <CheckoutSummary \r\n                        ingredients = {this.props.ings}\r\n                        checkoutCancelled = {this.checkoutCancelledHandler} \r\n                        checkoutContinued = {this.checkoutContinuedHandler} />\r\n                    <Route \r\n                        path={this.props.match.path + '/contact-data'} \r\n                        component={ContactData} />\r\n                </div>\r\n            )\r\n        }\r\n        return summary;\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return{\r\n        ings: state.burgerBuilder.ingredients,\r\n        purchased: state.order.purchased\r\n    }\r\n}\r\n\r\n// const mapDispatchToProps = dispatch => {\r\n//     return{\r\n//         onInitPurchase : () => dispatch(actions.purchaseInit())\r\n//     }\r\n// }\r\nexport default connect(mapStateToProps)(Checkout);"],"sourceRoot":""}