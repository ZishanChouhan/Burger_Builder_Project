{"version":3,"sources":["components/Order/Order.module.css","components/Order/Order.js","containers/Orders/Orders.js"],"names":["module","exports","order","props","ingredients","ingredientName","push","name","amount","ingredientOutput","map","ig","style","textTransform","display","margin","border","padding","className","classes","Order","Number","parseFloat","price","toFixed","Orders","this","onFetchOrders","token","userId","orders","Spinner","loading","id","Component","connect","state","auth","dispatch","actions","withErrorHandler","axios"],"mappings":"2HACAA,EAAOC,QAAU,CAAC,MAAQ,uB,wGC+BXC,EA7BD,SAACC,GACX,IAAMC,EAAc,GAEpB,IAAI,IAAIC,KAAkBF,EAAMC,YAC5BA,EAAYE,KAAK,CACbC,KAAOF,EACPG,OAAQL,EAAMC,YAAYC,KAGlC,IAAMI,EAAmBL,EAAYM,KAAI,SAAAC,GACrC,OAAO,uBACHC,MAAO,CACHC,cAAe,aACfC,QAAU,eACVC,OAAS,QACTC,OAAS,iBACTC,QAAU,OANX,UASYN,EAAGJ,KATf,KASuBI,EAAGH,OAT1B,MASEG,EAAGJ,SAEhB,OACI,sBAAKW,UAAWC,IAAQC,MAAxB,UACI,8CAAiBX,KACjB,wCAAU,0CAAaY,OAAOC,WAAWnB,EAAMoB,OAAOC,QAAQ,a,wCCpBpEC,E,uKAEF,WACGC,KAAKvB,MAAMwB,cAAcD,KAAKvB,MAAMyB,MAAOF,KAAKvB,MAAM0B,U,oBAGzD,WACI,IAAIC,EAAS,cAACC,EAAA,EAAD,IASb,OARIL,KAAKvB,MAAM6B,UACXF,EAASJ,KAAKvB,MAAM2B,OAAOpB,KAAI,SAAAR,GAAK,OAC5B,cAACkB,EAAD,CAEIhB,YAAeF,EAAME,YACrBmB,MAASrB,EAAMqB,OAFVrB,EAAM+B,QAMvB,8BACKH,Q,GAlBII,aAsCNC,uBAdS,SAAAC,GACpB,MAAM,CACFN,OAAQM,EAAMlC,MAAM4B,OACpBE,QAASI,EAAMlC,MAAM8B,QACrBJ,MAAOQ,EAAMC,KAAKT,MAClBC,OAAQO,EAAMC,KAAKR,WAIA,SAACS,GACxB,MAAM,CACFX,cAAe,SAACC,EAAOC,GAAR,OAAmBS,EAASC,IAAoBX,EAAOC,QAG/DM,CAA6CK,YAAiBf,EAAQgB","file":"static/js/5.011e3c96.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"Order\":\"Order_Order__C0zJW\"};","import classes from './Order.module.css';\r\nimport React from 'react';\r\n\r\nconst order = (props) => {\r\n    const ingredients = [];\r\n\r\n    for(let ingredientName in props.ingredients){\r\n        ingredients.push({\r\n            name : ingredientName, \r\n            amount: props.ingredients[ingredientName]});\r\n    }\r\n\r\n    const ingredientOutput = ingredients.map(ig => {\r\n        return <span \r\n            style={{\r\n                textTransform: 'capitalize',\r\n                display : 'inline-block',\r\n                margin : '0 8px',\r\n                border : '1px solid #ccc',\r\n                padding : '5px'\r\n\r\n            }}\r\n            key={ig.name}>{ig.name} ({ig.amount})</span>;\r\n    })\r\n    return(\r\n        <div className={classes.Order}>\r\n            <p>ingredients: {ingredientOutput}</p>\r\n            <p>Price: <strong>USD {Number.parseFloat(props.price).toFixed(2)}</strong></p>\r\n        </div>\r\n    );\r\n\r\n};\r\nexport default order;","import React, {Component} from 'react';\r\nimport Order from '../../components/Order/Order';\r\nimport axios from '../../axios-orders';\r\nimport withErrorHandler from '../../hoc/withErrorHandler/withErrorHandler';\r\nimport * as actions from '../../store/actions/index';\r\nimport { connect } from 'react-redux';\r\nimport Spinner from '../../components/UI/Spinner/Spinner';\r\nclass Orders extends Component {\r\n\r\n    componentDidMount(){\r\n       this.props.onFetchOrders(this.props.token, this.props.userId);\r\n    }\r\n\r\n    render(){\r\n        let orders = <Spinner />\r\n        if(!this.props.loading){\r\n            orders = this.props.orders.map(order => (\r\n                    <Order \r\n                        key={order.id} \r\n                        ingredients = {order.ingredients}\r\n                        price = {order.price}/>\r\n            ))\r\n        }\r\n        return (\r\n            <div>\r\n                {orders}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return{\r\n        orders: state.order.orders,\r\n        loading: state.order.loading,\r\n        token: state.auth.token,\r\n        userId: state.auth.userId\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return{\r\n        onFetchOrders: (token, userId) => dispatch(actions.fetchOrders(token, userId))\r\n    }\r\n}\r\nexport default connect(mapStateToProps, mapDispatchToProps)(withErrorHandler(Orders, axios));"],"sourceRoot":""}